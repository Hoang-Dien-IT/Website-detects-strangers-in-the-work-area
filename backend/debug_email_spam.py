#!/usr/bin/env python3
"""
Debug script ƒë·ªÉ ki·ªÉm tra t·∫°i sao email v·∫´n spam li√™n t·ª•c
"""

import asyncio
import sys
import os
from datetime import datetime, timedelta
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

from app.services.notification_service import notification_service
from app.config import settings

async def debug_email_spam():
    """Debug t·∫°i sao email v·∫´n spam"""
    
    print("üîç DEBUG EMAIL SPAM ISSUE")
    print("=" * 60)
    
    # 1. Ki·ªÉm tra settings
    print("üìã 1. Ki·ªÉm tra settings:")
    print(f"   DEVELOPMENT_MODE: {settings.development_mode}")
    print(f"   BYPASS_EMAIL_COOLDOWN: {settings.bypass_email_cooldown}")
    print(f"   SMTP_SERVER: {settings.smtp_server}")
    print(f"   SMTP_USERNAME: {settings.smtp_username}")
    
    # 2. Ki·ªÉm tra cooldown dictionary
    print(f"\nüìã 2. Cooldown dictionary hi·ªán t·∫°i:")
    if notification_service.alert_cooldown:
        for key, last_time in notification_service.alert_cooldown.items():
            time_diff = datetime.utcnow() - last_time
            print(f"   {key}: {time_diff.total_seconds():.1f}s ago")
    else:
        print("   Kh√¥ng c√≥ cooldown n√†o")
    
    # 3. Test logic cooldown
    print(f"\nüìã 3. Test cooldown logic:")
    user_id = "debug_user"
    camera_id = "debug_camera"
    cooldown_key = f"{user_id}_{camera_id}_stranger_email"
    
    # Simulate detection v·ªõi 1 ng∆∞·ªùi l·∫°
    stranger_detections = [{"detection_type": "stranger", "person_name": "Unknown"}]
    
    current_time = datetime.utcnow()
    last_alert_time = notification_service.alert_cooldown.get(cooldown_key)
    basic_cooldown_seconds = 60  # 1 ph√∫t cho 1 ng∆∞·ªùi l·∫°
    
    # Logic t∆∞∆°ng t·ª± nh∆∞ trong notification_service
    should_bypass_cooldown = (
        settings.bypass_email_cooldown and settings.development_mode
    )
    
    print(f"   should_bypass_cooldown: {should_bypass_cooldown}")
    print(f"   last_alert_time: {last_alert_time}")
    print(f"   basic_cooldown_seconds: {basic_cooldown_seconds}")
    
    if last_alert_time:
        time_since_last = current_time - last_alert_time
        print(f"   time_since_last: {time_since_last.total_seconds():.1f}s")
        print(f"   cooldown_remaining: {max(0, basic_cooldown_seconds - time_since_last.total_seconds()):.1f}s")
    
    # 4. T·∫°o mock cooldown v√† test
    print(f"\nüìã 4. Test v·ªõi mock cooldown:")
    notification_service.alert_cooldown[cooldown_key] = datetime.utcnow()
    print(f"   ƒê√£ set cooldown cho {cooldown_key}")
    
    # Simulate email send attempt
    current_time = datetime.utcnow()
    last_alert_time = notification_service.alert_cooldown.get(cooldown_key)
    
    should_bypass = settings.bypass_email_cooldown and settings.development_mode
    
    if not should_bypass:
        if last_alert_time and (current_time - last_alert_time < timedelta(seconds=basic_cooldown_seconds)):
            remaining_time = timedelta(seconds=basic_cooldown_seconds) - (current_time - last_alert_time)
            print(f"   ‚úÖ COOLDOWN HO·∫†T ƒê·ªòNG: Ch·ªù {remaining_time.total_seconds():.0f}s n·ªØa")
        else:
            print(f"   ‚ùå COOLDOWN KH√îNG HO·∫†T ƒê·ªòNG: Email s·∫Ω ƒë∆∞·ª£c g·ª≠i")
    else:
        print(f"   ‚ö†Ô∏è BYPASS ACTIVE: Cooldown b·ªã b·ªè qua")
    
    # 5. Ki·ªÉm tra c√°c detection logs g·∫ßn ƒë√¢y
    print(f"\nüìã 5. Ki·ªÉm tra detection trong stream processor:")
    print("   C·∫ßn ki·ªÉm tra xem c√≥ ph·∫£i do stream processor g·ªçi qu√° nhi·ªÅu l·∫ßn kh√¥ng")
    
    print("\nüéØ T·ªîNG K·∫æT:")
    print(f"   - Settings bypass: {should_bypass}")
    print(f"   - Cooldown dictionary size: {len(notification_service.alert_cooldown)}")
    print(f"   - N·∫øu v·∫´n spam ‚Üí Ki·ªÉm tra stream_processor g·ªçi notification qu√° nhi·ªÅu")

if __name__ == "__main__":
    asyncio.run(debug_email_spam())
