from typing import Dict, Optional
from datetime import datetime, timedelta
import asyncio
import uuid

class PersonPresence:
    """L∆∞u tr·∫°ng th√°i hi·ªán di·ªán c·ªßa m·ªôt ng∆∞·ªùi tr√™n camera"""
    def __init__(self, person_id: str, person_name: str, detection_type: str, camera_id: str):
        self.person_id = person_id
        self.person_name = person_name
        self.detection_type = detection_type  # 'known_person' or 'stranger'
        self.camera_id = camera_id
        self.first_detected = datetime.now()
        self.last_detected = datetime.now()
        self.last_saved = datetime.now()
        self.is_present = True
        self.detection_count = 0
        
    def update_detection(self):
        """C·∫≠p nh·∫≠t th·ªùi gian ph√°t hi·ªán g·∫ßn nh·∫•t"""
        self.last_detected = datetime.now()
        self.detection_count += 1
        if not self.is_present:
            # Ng∆∞·ªùi n√†y v·ª´a quay tr·ªü l·∫°i
            self.is_present = True
            return True  # C·∫ßn l∆∞u detection m·ªõi
        return False
        
    def mark_absent(self):
        """ƒê√°nh d·∫•u ng∆∞·ªùi n√†y kh√¥ng c√≤n trong khung h√¨nh"""
        self.is_present = False
        
    def should_save_detection(self) -> bool:
        """Ki·ªÉm tra c√≥ n√™n l∆∞u detection kh√¥ng d·ª±a tr√™n logic business"""
        now = datetime.now()
        
        if not self.is_present:
            return False
            
        # Th·ªùi gian t·ª´ l·∫ßn l∆∞u cu·ªëi
        time_since_last_save = now - self.last_saved
        
        if self.detection_type == 'known_person':
            # Ng∆∞·ªùi quen: l∆∞u m·ªói 1 ph√∫t n·∫øu xu·∫•t hi·ªán qu√° l√¢u
            return time_since_last_save >= timedelta(minutes=1)
        else:
            # Ng∆∞·ªùi l·∫°: l∆∞u m·ªói 30 gi√¢y n·∫øu xu·∫•t hi·ªán qu√° l√¢u  
            return time_since_last_save >= timedelta(seconds=30)
            
    def mark_saved(self):
        """ƒê√°nh d·∫•u ƒë√£ l∆∞u detection"""
        self.last_saved = datetime.now()


class DetectionTracker:
    """Qu·∫£n l√Ω tracking detection ƒë·ªÉ t·ªëi ∆∞u vi·ªác l∆∞u database"""
    
    def __init__(self):
        # Dictionary l∆∞u tr·∫°ng th√°i c·ªßa t·ª´ng ng∆∞·ªùi tr√™n t·ª´ng camera
        # Key: f"{camera_id}_{person_id}", Value: PersonPresence
        self.presences: Dict[str, PersonPresence] = {}
        
        # Th·ªùi gian timeout ƒë·ªÉ coi nh∆∞ ng∆∞·ªùi ƒë√£ r·ªùi kh·ªèi camera (10 gi√¢y)
        self.absence_timeout = timedelta(seconds=10)
        
        # Task cleanup ch·∫°y ƒë·ªãnh k·ª≥
        self._cleanup_task = None
        
    def start_cleanup_task(self):
        """B·∫Øt ƒë·∫ßu task cleanup ƒë·ªãnh k·ª≥"""
        if self._cleanup_task is None:
            self._cleanup_task = asyncio.create_task(self._periodic_cleanup())
            
    async def stop_cleanup_task(self):
        """D·ª´ng task cleanup"""
        if self._cleanup_task:
            self._cleanup_task.cancel()
            try:
                await self._cleanup_task
            except asyncio.CancelledError:
                pass
            self._cleanup_task = None
            
    async def _periodic_cleanup(self):
        """Task cleanup ch·∫°y ƒë·ªãnh k·ª≥ ƒë·ªÉ ƒë√°nh d·∫•u ng∆∞·ªùi v·∫Øng m·∫∑t"""
        while True:
            try:
                await asyncio.sleep(5)  # Ch·∫°y m·ªói 5 gi√¢y
                await self._cleanup_absent_persons()
            except asyncio.CancelledError:
                break
            except Exception as e:
                print(f"Error in cleanup task: {e}")
                
    async def _cleanup_absent_persons(self):
        """ƒê√°nh d·∫•u nh·ªØng ng∆∞·ªùi ƒë√£ v·∫Øng m·∫∑t qu√° l√¢u"""
        now = datetime.now()
        to_remove = []
        
        for key, presence in self.presences.items():
            if presence.is_present:
                # Ki·ªÉm tra n·∫øu kh√¥ng ph√°t hi·ªán trong th·ªùi gian timeout
                if now - presence.last_detected > self.absence_timeout:
                    presence.mark_absent()
                    print(f"üîÑ Marked absent: {presence.person_name} on camera {presence.camera_id}")
            else:
                # X√≥a nh·ªØng presence ƒë√£ v·∫Øng m·∫∑t qu√° l√¢u (1 ph√∫t)
                if now - presence.last_detected > timedelta(minutes=1):
                    to_remove.append(key)
                    
        for key in to_remove:
            del self.presences[key]
            print(f"üóëÔ∏è Cleaned up old presence: {key}")
            
    def track_detection(self, camera_id: str, person_id: str, person_name: str, 
                       detection_type: str, confidence: float) -> bool:
        """
        Track m·ªôt detection v√† tr·∫£ v·ªÅ True n·∫øu c·∫ßn l∆∞u v√†o database
        
        Returns:
            bool: True n·∫øu c·∫ßn l∆∞u detection n√†y, False n·∫øu kh√¥ng c·∫ßn
        """
        key = f"{camera_id}_{person_id or 'unknown'}"
        now = datetime.now()
        
        if key not in self.presences:
            # L·∫ßn ƒë·∫ßu ph√°t hi·ªán ng∆∞·ªùi n√†y tr√™n camera n√†y
            self.presences[key] = PersonPresence(
                person_id=person_id or str(uuid.uuid4()),
                person_name=person_name,
                detection_type=detection_type,
                camera_id=camera_id
            )
            print(f"üÜï New detection: {person_name} on camera {camera_id}")
            return True  # L∆∞u l·∫ßn ƒë·∫ßu
            
        presence = self.presences[key]
        
        # C·∫≠p nh·∫≠t detection
        just_returned = presence.update_detection()
        
        if just_returned:
            # Ng∆∞·ªùi n√†y v·ª´a quay tr·ªü l·∫°i sau khi v·∫Øng m·∫∑t
            print(f"üîÑ Person returned: {person_name} on camera {camera_id}")
            presence.mark_saved()
            return True
            
        # Ki·ªÉm tra c√≥ n√™n l∆∞u theo logic th·ªùi gian
        should_save = presence.should_save_detection()
        
        if should_save:
            print(f"‚è∞ Periodic save: {person_name} on camera {camera_id} (type: {detection_type})")
            presence.mark_saved()
            return True
            
        return False
        
    def get_presence_info(self, camera_id: str) -> Dict[str, dict]:
        """L·∫•y th√¥ng tin v·ªÅ nh·ªØng ng∆∞·ªùi hi·ªán di·ªán tr√™n camera"""
        camera_presences = {}
        for key, presence in self.presences.items():
            if presence.camera_id == camera_id and presence.is_present:
                camera_presences[key] = {
                    'person_name': presence.person_name,
                    'detection_type': presence.detection_type,
                    'first_detected': presence.first_detected,
                    'last_detected': presence.last_detected,
                    'duration': datetime.now() - presence.first_detected,
                    'detection_count': presence.detection_count
                }
        return camera_presences

# Global instance
detection_tracker = DetectionTracker()
